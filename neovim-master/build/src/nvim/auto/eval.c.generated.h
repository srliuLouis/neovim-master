#define DEFINE_FUNC_ATTRIBUTES
#include "nvim/func_attr.h"
#undef DEFINE_FUNC_ATTRIBUTES
static int eval1_emsg(char_u **arg, typval_T *rettv, _Bool evaluate) FUNC_ATTR_NONNULL_ARG(1, 2);
static list_T *heredoc_get(exarg_T *eap, char_u *cmd);
static void ex_let_const(exarg_T *eap, const _Bool is_const);
static int ex_let_vars(char_u *arg_start, typval_T *tv, int copy, int semicolon, int var_count, int is_const, char_u *nextchars );
static const char_u *skip_var_list(const char_u *arg, int *var_count, int *semicolon);
static const char_u *skip_var_one(const char_u *arg);
static void list_glob_vars(int *first);
static void list_buf_vars(int *first);
static void list_win_vars(int *first);
static void list_tab_vars(int *first);
static void list_vim_vars(int *first);
static void list_script_vars(int *first);
static const char *list_arg_vars(exarg_T *eap, const char *arg, int *first);
static char_u *ex_let_one(char_u *arg, typval_T *const tv, const _Bool copy, const _Bool is_const, const char_u *const endchars, const char_u *const op) FUNC_ATTR_NONNULL_ARG(1, 2) FUNC_ATTR_WARN_UNUSED_RESULT;
static void set_var_lval(lval_T *lp, char_u *endp, typval_T *rettv, int copy, const _Bool is_const, const char *op);
static void ex_unletlock(exarg_T *eap, char_u *argstart, int deep, ex_unletlock_callback callback) FUNC_ATTR_NONNULL_ALL;
static int do_unlet_var(lval_T *lp, char_u *name_end, exarg_T *eap, int deep FUNC_ATTR_UNUSED) FUNC_ATTR_NONNULL_ALL;
static int do_lock_var(lval_T *lp, char_u *name_end FUNC_ATTR_UNUSED, exarg_T *eap, int deep) FUNC_ATTR_NONNULL_ARG(1, 3);
static int pattern_match(char_u *pat, char_u *text, _Bool ic);
static int eval2(char_u **arg, typval_T *rettv, int evaluate);
static int eval3(char_u **arg, typval_T *rettv, int evaluate);
static int eval4(char_u **arg, typval_T *rettv, int evaluate);
static int eval5(char_u **arg, typval_T *rettv, int evaluate);
static int eval6(char_u **arg, typval_T *rettv, int evaluate, int want_string) FUNC_ATTR_NO_SANITIZE_UNDEFINED;
static int eval7(char_u **arg, typval_T *rettv, int evaluate, int want_string );
static int eval_index(char_u **arg, typval_T *rettv, int evaluate, int verbose );
static int get_string_tv(char_u **arg, typval_T *rettv, int evaluate);
static int get_lit_string_tv(char_u **arg, typval_T *rettv, int evaluate);
static void partial_free(partial_T *pt);
static int get_list_tv(char_u **arg, typval_T *rettv, int evaluate);
static int free_unref_items(int copyID);
static inline _Bool set_ref_in_fmark(fmark_T fm, int copyID) FUNC_ATTR_WARN_UNUSED_RESULT;
static inline _Bool set_ref_list(list_T *list, int copyID) FUNC_ATTR_WARN_UNUSED_RESULT;
static inline _Bool set_ref_dict(dict_T *dict, int copyID) FUNC_ATTR_WARN_UNUSED_RESULT;
static int get_literal_key(char_u **arg, typval_T *tv) FUNC_ATTR_NONNULL_ALL;
static int dict_get_tv(char_u **arg, typval_T *rettv, int evaluate, _Bool literal);
static int get_env_tv(char_u **arg, typval_T *rettv, int evaluate);
static void ga_concat_esc(garray_T *gap, const char_u *p, int clen) FUNC_ATTR_NONNULL_ALL;
static void ga_concat_shorten_esc(garray_T *gap, const char_u *str) FUNC_ATTR_NONNULL_ARG(1);
static void assert_append_cmd_or_arg(garray_T *gap, typval_T *argvars, const char *cmd) FUNC_ATTR_NONNULL_ALL;
static int filter_map_one(typval_T *tv, typval_T *expr, int map, int *remp) FUNC_ATTR_NONNULL_ARG(1, 2);
static list_T *string_to_list(const char *str, size_t len, const _Bool keepempty);
static _Bool set_ref_in_callback(Callback *callback, int copyID, ht_stack_T **ht_stack, list_stack_T **list_stack);
static _Bool set_ref_in_callback_reader(CallbackReader *reader, int copyID, ht_stack_T **ht_stack, list_stack_T **list_stack);
static void timer_close_cb(TimeWatcher *tw, void *data);
static void timer_decref(timer_T *timer);
static int get_env_len(const char_u **arg);
static char_u *make_expanded_name(const char_u *in_start, char_u *expr_start, char_u *expr_end, char_u *in_end);
static void check_vars(const char *name, size_t len);
static _Bool tv_is_luafunc(typval_T *tv);
static hashtab_T *find_var_ht_dict(const char *name, const size_t name_len, const char **varname, dict_T **d);
static void delete_var(hashtab_T *ht, hashitem_T *hi);
static void list_one_var(dictitem_T *v, const char *prefix, int *first);
static void list_one_var_a(const char *prefix, const char *name, const ptrdiff_t name_len, const int type, const char *string, int *first);
static void set_var_const(const char *name, const size_t name_len, typval_T *const tv, const _Bool copy, const _Bool is_const) FUNC_ATTR_NONNULL_ALL;
static const char *find_option_end(const char **const arg, int *const opt_flags);
static void prof_sort_list(FILE *fd, ufunc_T **sorttab, int st_len, char *title, int prefer_self );
static void prof_func_line(FILE *fd, int count, proftime_T *total, proftime_T *self, int prefer_self );
static int prof_total_cmp(const void *s1, const void *s2);
static int prof_self_cmp(const void *s1, const void *s2);
static var_flavour_T var_flavour(char_u *varname);
#include "nvim/func_attr.h"
