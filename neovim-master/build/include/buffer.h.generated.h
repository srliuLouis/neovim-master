#define DEFINE_FUNC_ATTRIBUTES
#include "nvim/func_attr.h"
#undef DEFINE_FUNC_ATTRIBUTES
int open_buffer(int read_stdin, exarg_T *eap, int flags );
void set_bufref(bufref_T *bufref, buf_T *buf);
_Bool bufref_valid(bufref_T *bufref);
_Bool buf_valid(buf_T *buf) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
void close_buffer(win_T *win, buf_T *buf, int action, _Bool abort_if_last);
void buf_clear_file(buf_T *buf);
void buf_clear(void);
void buf_freeall(buf_T *buf, int flags);
void goto_buffer(exarg_T *eap, int start, int dir, int count);
void handle_swap_exists(bufref_T *old_curbuf);
char_u *do_bufdel(int command, char_u *arg, int addr_count, int start_bnr, int end_bnr, int forceit );
int do_buffer(int action, int start, int dir, int count, int forceit );
void set_curbuf(buf_T *buf, int action);
void enter_buffer(buf_T *buf);
void do_autochdir(void);
void no_write_message(void);
void no_write_message_nobang(const buf_T *const buf) FUNC_ATTR_NONNULL_ALL;
buf_T *buflist_new(char_u *ffname_arg, char_u *sfname_arg, linenr_T lnum, int flags);
_Bool curbuf_reusable(void);
void free_buf_options(buf_T *buf, int free_p_ff);
int buflist_getfile(int n, linenr_T lnum, int options, int forceit);
void buflist_getfpos(void);
buf_T *buflist_findname_exp(char_u *fname);
buf_T *buflist_findname(char_u *ffname);
int buflist_findpat(const char_u *pattern, const char_u *pattern_end, _Bool unlisted, _Bool diffmode, _Bool curtab_only ) FUNC_ATTR_NONNULL_ARG(1);
int ExpandBufnames(char_u *pat, int *num_file, char_u ***file, int options);
buf_T *buflist_findnr(int nr);
char_u *buflist_nr2name(int n, int fullname, int helptail );
void buflist_setfpos(buf_T *const buf, win_T *const win, linenr_T lnum, colnr_T col, _Bool copy_options) FUNC_ATTR_NONNULL_ARG(1);
void get_winopts(buf_T *buf);
pos_T *buflist_findfpos(buf_T *buf);
linenr_T buflist_findlnum(buf_T *buf);
void buflist_list(exarg_T *eap);
int buflist_name_nr(int fnum, char_u **fname, linenr_T *lnum);
int setfname(buf_T *buf, char_u *ffname_arg, char_u *sfname_arg, _Bool message );
void buf_set_name(int fnum, char_u *name);
void buf_name_changed(buf_T *buf);
buf_T *setaltfname(char_u *ffname, char_u *sfname, linenr_T lnum);
char_u *getaltfname(_Bool errmsg );
int buflist_add(char_u *fname, int flags);
void buflist_altfpos(win_T *win);
_Bool otherfile(char_u *ffname) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL;
void buf_set_file_id(buf_T *buf);
void fileinfo(int fullname, int shorthelp, int dont_truncate );
void col_print(char_u *buf, size_t buflen, int col, int vcol);
void maketitle(void);
void resettitle(void);
int build_stl_str_hl(win_T *wp, char_u *out, size_t outlen, char_u *fmt, int use_sandbox, char_u fillchar, int maxwidth, stl_hlrec_t **hltab, StlClickRecord **tabtab );
void get_rel_pos(win_T *wp, char_u *buf, int buflen);
void fname_expand(buf_T *buf, char_u **ffname, char_u **sfname);
char_u *alist_name(aentry_T *aep);
void do_arg_all(int count, int forceit, int keep_tabs );
int bt_prompt(buf_T *buf);
void ex_buffer_all(exarg_T *eap);
void do_modelines(int flags);
_Bool bt_help(const buf_T *const buf) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
_Bool bt_normal(const buf_T *const buf) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
_Bool bt_quickfix(const buf_T *const buf) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
_Bool bt_terminal(const buf_T *const buf) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
_Bool bt_nofile(const buf_T *const buf) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
_Bool bt_dontwrite(const buf_T *const buf) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
_Bool bt_dontwrite_msg(const buf_T *const buf) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT;
_Bool buf_hide(const buf_T *const buf);
char_u *buf_spname(buf_T *buf);
_Bool find_win_for_buf(buf_T *buf, win_T **wp, tabpage_T **tp);
int buf_signcols(buf_T *buf);
char_u *buf_get_fname(const buf_T *buf) FUNC_ATTR_PURE FUNC_ATTR_WARN_UNUSED_RESULT FUNC_ATTR_NONNULL_ALL;
void set_buflisted(int on);
_Bool buf_contents_changed(buf_T *buf) FUNC_ATTR_NONNULL_ALL;
void wipe_buffer(buf_T *buf, int aucmd );
void buf_open_scratch(handle_T bufnr, char *bufname);
#include "nvim/func_attr.h"
